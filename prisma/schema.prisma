// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma
model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String   @unique
  isvarified Boolean?
  onboarding Boolean?  
  token      String  
  expiresAt  DateTime?//  this field store token expiration date 
  password   String
  name       String?
  address    String?
  city       String?
  state      String?
  country    String?
  role       Role?
  status     Status?
  phone      String?
  tutor      Tutor?
  parent     Parent?
  Job        Job[]
  lesson    Lesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  Invoice Invoice[]

  Item Item[]
}

enum Role {
  admin
  student
  parent
  tutor
}

enum Status {
  active
  disabled
  pendingApproval
}

model Tutor {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  state            String?
  bio              String?
  experience       String?
  bank             String?
  bankaccount      String?
  currentposition  String?
  education        String?
  certification    String?
  teachingOnline   Boolean?
  profilepic       String?
  nric             String?
  stt              String?
  arf              String?
  resume           String?
  hourly           String?
  subjects         String[]
  user              User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String         @unique @db.ObjectId
  availability      Availability[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  StudentTutor StudentTutor[]

  Payout Payout[]
}


model Subject {
  id     String         @id @default(auto()) @map("_id") @db.ObjectId
  name   String

}


model Availability {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  day       String
  startTime String
  endTime   String
  tutorId   String @db.ObjectId
  tutor     Tutor  @relation(fields: [tutorId], references: [id])
}

model Parent {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String  @unique @db.ObjectId
  user          User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  students      Student[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt


}

model Student {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId 
  email     String   
  phone     String
  address   String
  city      String
  state     String
  name      String
  school    String
  studymode String
  subject   String[]
  class     String
  sessionFrequency  String
  sessionDuration    String
  age       String
  sex       String
  Class     Lesson[]
  parent    Parent   @relation(fields: [parentId], references: [id],onDelete: Cascade)
  parentId  String   @db.ObjectId 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  StudentTutor StudentTutor[]
  Invoice Invoice[]
  @@unique([name, parentId])
}

model Lesson {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  subject     String
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  tutorhourly String?
  totalDuration Int?
  studentId   String   @db.ObjectId
  student     Student  @relation(fields: [studentId], references: [id])
  tutorId     String   @db.ObjectId
  tutor       User    @relation(fields: [tutorId],references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Item Item[]
}


model Job {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject       String   // Subject or requirement of the job
  mode          String // Online or Offline class mode
  studentLevel  String    // Level of the student (e.g., beginner, intermediate, etc.)
  requriments   String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Invoice {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  invoiceNumber String
  date          DateTime
  parentId      String        @db.ObjectId
  studentId     String        @db.ObjectId
  items         Item[]
  subtotal      Float
  sst           Float
  total         Float
  status        String
  parent        User @relation(fields: [parentId], references: [id])
  student       Student @relation(fields: [studentId],references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt


 

  Payout Payout[]
}

model Item {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  lessonId      String @db.ObjectId
  tutorId       String @db.ObjectId
  subject       String
  totalDuration Int
  tutorHourly   Float
  totalHours    Int
  totalAmount   Float
  invoiceId     String @db.ObjectId
  Invoice       Invoice @relation(fields: [invoiceId], references: [id],onDelete: Cascade)
  tutor         User @relation(fields: [tutorId], references: [id])
  lesson       Lesson @relation(fields: [lessonId],references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@unique([lessonId])
}

// Define Enum for Invoice Status
enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
}

// Define Enum for Payment Method
enum PaymentMethod {
  CASH
  CREDIT_CARD
  BANK_TRANSFER
  PAYPAL
}

// Define the Payment model to track payments made for invoices
model Payment {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  invoiceId  String     @db.ObjectId
  amount     Float      // Amount paid
  method     PaymentMethod
  paidAt     DateTime   @default(now())
}

// 
model StudentTutor {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId String   @db.ObjectId
  tutorId   String   @db.ObjectId
  student   Student  @relation(fields: [studentId], references: [id])
  tutor     Tutor    @relation(fields: [tutorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
   @@unique([studentId, tutorId])  // Composite unique constraint

}

model Payout {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  tutorId    String   @db.ObjectId // Reference to the Tutor
  amount     Float    // Payout amount (after 25% cut)
  invoiceId  String   @db.ObjectId // Reference to the associated Invoice
  createdAt  DateTime @default(now()) // Date when the payout was created
  updatedAt  DateTime @updatedAt // Date when the payout was last updated
  tutor      Tutor    @relation(fields: [tutorId], references: [id])
  invoice    Invoice  @relation(fields: [invoiceId], references: [id])
}

