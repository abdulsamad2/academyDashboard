// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma
model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String   @unique
  isvarified Boolean?
  onboarding Boolean?  
  token      String  
  expiresAt  DateTime?//  this field store token expiration date 
  password   String
  name       String?
  address    String?
  city       String?
  state      String?
  country    String?
  role       Role
  status     Status?
  phone      String?
  tutor      Tutor?
  parent     Parent?
  Job        Job[]
  Invoice    Invoice[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

enum Role {
  admin
  student
  parent
  tutor
}

enum Status {
  active
  disabled
  pendingApproval
}

model Tutor {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  state            String?
  bio              String?
  experience       String?
  bank             String?
  bankaccount      String?
  currentposition  String?
  education        String?
  certification    String?
  teachingOnline   Boolean?
  profilepic       String?
  nric             String?
  stt              String?
  arf              String?
  resume           String?
  Invoice          Invoice[]
  user              User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String         @unique @db.ObjectId
  availability      Availability[]
  subjects          TutorSubject[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  Class             Class[]

  StudentTutor StudentTutor[]
}


model Subject {
  id     String         @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  tutors TutorSubject[]
}

model TutorSubject {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  tutorId   String  @db.ObjectId
  subjectId String  @db.ObjectId
  tutor     Tutor   @relation(fields: [tutorId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])
}

model Availability {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  day       String
  startTime String
  endTime   String
  tutorId   String @db.ObjectId
  tutor     Tutor  @relation(fields: [tutorId], references: [id])
}

model Parent {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  user          User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String  @unique @db.ObjectId
  students      Student[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

}

model Student {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId 
  email     String   
  phone     String
  address   String
  city      String
  state     String
  name      String
  school    String
  studymode String
  class     String
  age       String
  sex       String
  Class     Class[]
  invoices  Invoice[]  // Relation to Invoice
  parent    Parent   @relation(fields: [parentId], references: [id],onDelete: Cascade)
  parentId  String   @db.ObjectId 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  StudentTutor StudentTutor[]

}

model Class {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  startTime   DateTime
  EndTime     DateTime
  studentId   String   @db.ObjectId
  student     Student  @relation(fields: [studentId], references: [id])
  tutorId     String   @db.ObjectId
  tutor       Tutor    @relation(fields: [tutorId],references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}

model Job {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject       String   // Subject or requirement of the job
  mode          String // Online or Offline class mode
  studentLevel  String    // Level of the student (e.g., beginner, intermediate, etc.)
  requriments   String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Invoice {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  userId         String      @db.ObjectId
  user           User       @relation(fields: [userId], references: [id])
  student        Student    @relation(fields: [studentId], references: [id])
  studentId      String     @db.ObjectId
  tutor          Tutor      @relation(fields: [tutorId], references: [id])
  tutorId        String     @db.ObjectId
  issueDate      DateTime   @default(now())
  dueDate        DateTime
  status         InvoiceStatus
  amount         Float      // Total amount of the invoice
  currency       String     // Currency for the payment (e.g., "USD", "PKR")
  paymentMethod  PaymentMethod
  description    String?    // Description of the invoice or payment reason
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  Payment Payment[]
}

// Define Enum for Invoice Status
enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
}

// Define Enum for Payment Method
enum PaymentMethod {
  CASH
  CREDIT_CARD
  BANK_TRANSFER
  PAYPAL
}

// Define the Payment model to track payments made for invoices
model Payment {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  invoice    Invoice    @relation(fields: [invoiceId], references: [id])
  invoiceId  String     @db.ObjectId
  amount     Float      // Amount paid
  method     PaymentMethod
  paidAt     DateTime   @default(now())
}

// 
model StudentTutor {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId String   @db.ObjectId
  tutorId   String   @db.ObjectId
  student   Student  @relation(fields: [studentId], references: [id])
  tutor     Tutor    @relation(fields: [tutorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
   @@unique([studentId, tutorId])  // Composite unique constraint

}