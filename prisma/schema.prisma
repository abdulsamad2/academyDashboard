generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  phone         String         @unique
  otp           String?
  emailVerified Boolean        @default(false)
  phoneVerified Boolean        @default(false)
  isvarified    Boolean        @default(false)
  onboarding    Boolean?
  token         String?
  expiresAt     DateTime?
  password      String
  name          String?
  address       String?
  city          String?
  state         String?
  country       String?
  role          Role?
  status        Status?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  applications  Application[]
  deposits      Deposit[]
  invoices      Invoice[]
  items         Item[]
  jobs          Job[]
  lessons       Lesson[]
  payouts       Payout[]
  students      Student[]
  studentTutors StudentTutor[]
  tutor         Tutor?
}

model Tutor {
  id              String         @id @default(cuid())
  bio             String?
  experience      String?
  bank            String?
  bankaccount     String?
  currentposition String?
  education       String?
  certification   String?
  teachingOnline  Boolean?
  profilepic      String?
  nric            String?
  spm             String?
  arf             String?
  resume          String?
  degree          String?
  hourly          String?
  teachinglevel   String?
  age             String?
  subjects        String[]
  rating          String?
  feedback        String?
  userId          String         @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  availability    Availability[]
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subject {
  id   String @id @default(cuid())
  name String @unique
}

model Availability {
  id        String @id @default(cuid())
  day       String
  startTime String
  endTime   String
  tutorId   String
  tutor     Tutor  @relation(fields: [tutorId], references: [id])
}

model Student {
  id               String         @id @default(cuid())
  address          String
  city             String
  state            String
  name             String
  school           String
  studymode        String
  level            String?
  subject          String[]
  class            String
  sessionFrequency String
  sessionDuration  String
  age              String
  sex              String
  parentId         String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deposits         Deposit[]
  invoices         Invoice[]
  classes          Lesson[]
  parent           User           @relation(fields: [parentId], references: [id], onDelete: Cascade)
  studentTutors    StudentTutor[]

  @@unique([name, parentId])
}

model Lesson {
  id            String   @id @default(cuid())
  description   String
  subject       String
  date          DateTime
  startTime     DateTime
  endTime       DateTime
  tutorhourly   String?
  totalDuration Int?
  studentId     String
  tutorId       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  items         Item?
  student       Student  @relation(fields: [studentId], references: [id])
  tutor         User     @relation(fields: [tutorId], references: [id])
}

model Job {
  id               String        @id @default(cuid())
  userId           String
  subject          String
  mode             String
  start            DateTime
  hourly           String?
  location         String
  studentLevel     String
  requriments      String
  studentName      String
  studentAge       String
  studentgender    String
  tutorgender      String
  lastscore        String
  dayAvailable     String
  timeRange        String
  hoursPerSession  String
  sessionsPerWeek  String
  sessionsPerMonth String
  status           String        @default("in review")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  applications     Application[]
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Application {
  id          String   @id @default(cuid())
  tutorId     String
  jobId       String
  coverLetter String
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  tutor       User     @relation(fields: [tutorId], references: [id], onDelete: Cascade)

  @@unique([jobId, tutorId])
}

model Invoice {
  id            String   @id @default(cuid())
  invoiceNumber String
  date          DateTime
  parentId      String
  studentId     String
  subtotal      Float
  sst           Float
  total         Float
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  parent        User     @relation(fields: [parentId], references: [id])
  student       Student  @relation(fields: [studentId], references: [id])
  items         Item[]
  payouts       Payout[]
}

model Item {
  id            String   @id @default(cuid())
  lessonId      String   @unique
  tutorId       String
  subject       String
  totalDuration Int
  tutorHourly   Float
  totalHours    Int
  totalAmount   Float
  invoiceId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  invoice       Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  lesson        Lesson   @relation(fields: [lessonId], references: [id])
  tutor         User     @relation(fields: [tutorId], references: [id])
}

model Payment {
  id        String        @id @default(cuid())
  invoiceId String
  amount    Float
  method    PaymentMethod
  paidAt    DateTime      @default(now())
}

model StudentTutor {
  id          String   @id @default(cuid())
  studentId   String
  tutorId     String
  tutorhourly Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  tutor       User     @relation(fields: [tutorId], references: [id])

  @@unique([studentId, tutorId])
}

model Payout {
  id           String   @id @default(cuid())
  tutorId      String
  invoiceId    String
  totalEarning Float
  payoutAmount Float
  payoutDate   DateTime @default(now())
  status       String   @default("Pending")
  taxId        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  invoice      Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  tutor        User     @relation(fields: [tutorId], references: [id])
}

model Deposit {
  id            String   @id @default(cuid())
  invoiceNumber String
  date          DateTime
  parentId      String
  studentId     String
  depositAmount Float
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  parent        User     @relation(fields: [parentId], references: [id])
  student       Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, parentId])
}

enum Role {
  admin
  student
  parent
  tutor
}

enum Status {
  active
  disabled
  pendingApproval
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  BANK_TRANSFER
  PAYPAL
}
